#!/bin/bash

# üöÄ Script de test complet pour l'API Let's Play
# Auteur: Projet Spring Boot CRUD API
# Date: $(date)

echo "üöÄ === SCRIPT DE TEST API LET'S PLAY ==="
echo "üìÖ Date: $(date)"
echo ""

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
BASE_URL="http://localhost:8080/api"
CONTENT_TYPE="Content-Type: application/json"

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# Fonction pour afficher les sections
print_section() {
    echo -e "\n${BLUE}üî∏ $1${NC}"
    echo "----------------------------------------"
}

print_section "1. V√âRIFICATION DE L'APPLICATION"

# Test 1: V√©rifier que l'application r√©pond
echo "Test: Application accessible..."
STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/products)
if [ "$STATUS" = "200" ]; then
    print_result 0 "Application accessible (Status: $STATUS)"
else
    print_result 1 "Application non accessible (Status: $STATUS)"
    echo "‚ùó Assure-toi que l'application est d√©marr√©e avec: ./mvnw spring-boot:run"
    exit 1
fi

print_section "2. TESTS DES ENDPOINTS PUBLICS"

# Test 2: R√©cup√©ration des produits (endpoint public)
echo "Test: GET /api/products (sans authentification)..."
RESPONSE=$(curl -s $BASE_URL/products)
PRODUCT_COUNT=$(echo $RESPONSE | jq '. | length' 2>/dev/null || echo "0")
if [ "$PRODUCT_COUNT" -gt 0 ]; then
    print_result 0 "R√©cup√©ration des produits: $PRODUCT_COUNT produits trouv√©s"
    echo "Premier produit: $(echo $RESPONSE | jq '.[0].name' 2>/dev/null || echo 'N/A')"
else
    print_result 1 "Aucun produit trouv√©"
fi

print_section "3. TESTS D'AUTHENTIFICATION"

# Test 3: Inscription d'un nouvel utilisateur
echo "Test: POST /api/auth/signup (Inscription)..."
SIGNUP_DATA='{
    "name": "Test User Script",
    "email": "testscript@example.com",
    "password": "testscript123"
}'

SIGNUP_RESPONSE=$(curl -s -X POST -H "$CONTENT_TYPE" -d "$SIGNUP_DATA" $BASE_URL/auth/signup)
SIGNUP_STATUS=$(curl -s -X POST -H "$CONTENT_TYPE" -d "$SIGNUP_DATA" $BASE_URL/auth/signup -w "%{http_code}" -o /dev/null)

if [[ "$SIGNUP_STATUS" == "200" || "$SIGNUP_STATUS" == "400" ]]; then
    if [ "$SIGNUP_STATUS" = "400" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Utilisateur d√©j√† existant (normal si test d√©j√† ex√©cut√©)${NC}"
    else
        print_result 0 "Inscription r√©ussie"
        echo "Utilisateur cr√©√©: $(echo $SIGNUP_RESPONSE | jq '.name' 2>/dev/null || echo 'N/A')"
    fi
else
    print_result 1 "√âchec de l'inscription (Status: $SIGNUP_STATUS)"
fi

# Test 4: Connexion et r√©cup√©ration du token JWT
echo "Test: POST /api/auth/signin (Connexion)..."
SIGNIN_DATA='{
    "email": "testscript@example.com",
    "password": "testscript123"
}'

SIGNIN_RESPONSE=$(curl -s -X POST -H "$CONTENT_TYPE" -d "$SIGNIN_DATA" $BASE_URL/auth/signin)
TOKEN=$(echo $SIGNIN_RESPONSE | jq -r '.token' 2>/dev/null)

if [ "$TOKEN" != "null" ] && [ ! -z "$TOKEN" ]; then
    print_result 0 "Connexion r√©ussie - Token JWT obtenu"
    echo "Token (50 premiers caract√®res): ${TOKEN:0:50}..."
    AUTH_HEADER="Authorization: Bearer $TOKEN"
else
    print_result 1 "√âchec de la connexion"
    echo "R√©ponse: $SIGNIN_RESPONSE"
fi

print_section "4. TESTS CRUD AVEC AUTHENTIFICATION"

if [ ! -z "$TOKEN" ] && [ "$TOKEN" != "null" ]; then
    # Test 5: Cr√©ation d'un produit avec authentification
    echo "Test: POST /api/products (Cr√©ation de produit avec JWT)..."
    PRODUCT_DATA='{
        "name": "Produit Test Script",
        "description": "Produit cr√©√© par le script de test",
        "price": 299.99
    }'
    
    CREATE_PRODUCT_RESPONSE=$(curl -s -X POST -H "$CONTENT_TYPE" -H "$AUTH_HEADER" -d "$PRODUCT_DATA" $BASE_URL/products)
    CREATE_STATUS=$(curl -s -X POST -H "$CONTENT_TYPE" -H "$AUTH_HEADER" -d "$PRODUCT_DATA" $BASE_URL/products -w "%{http_code}" -o /dev/null)
    
    if [ "$CREATE_STATUS" = "200" ]; then
        print_result 0 "Cr√©ation de produit r√©ussie"
        PRODUCT_ID=$(echo $CREATE_PRODUCT_RESPONSE | jq -r '.id' 2>/dev/null)
        echo "Produit cr√©√©: $(echo $CREATE_PRODUCT_RESPONSE | jq '.name' 2>/dev/null)"
        echo "ID du produit: $PRODUCT_ID"
    else
        print_result 1 "√âchec de la cr√©ation de produit (Status: $CREATE_STATUS)"
        echo "R√©ponse: $CREATE_PRODUCT_RESPONSE"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Tests CRUD ignor√©s - Pas de token d'authentification${NC}"
fi

print_section "5. TESTS DE S√âCURIT√â"

# Test 6: Tentative d'acc√®s √† un endpoint prot√©g√© sans token
echo "Test: Acc√®s endpoint prot√©g√© sans authentification..."
UNAUTH_STATUS=$(curl -s -X POST -H "$CONTENT_TYPE" -d '{}' $BASE_URL/products -w "%{http_code}" -o /dev/null)
if [ "$UNAUTH_STATUS" = "401" ]; then
    print_result 0 "S√©curit√© OK - Acc√®s refus√© sans token (Status: $UNAUTH_STATUS)"
else
    print_result 1 "Probl√®me de s√©curit√© - Acc√®s non autoris√© accept√© (Status: $UNAUTH_STATUS)"
fi

# Test 7: Validation d'entr√©e (email invalide)
echo "Test: Validation des donn√©es d'entr√©e..."
INVALID_DATA='{
    "name": "Test",
    "email": "email-invalide",
    "password": "123"
}'

VALIDATION_STATUS=$(curl -s -X POST -H "$CONTENT_TYPE" -d "$INVALID_DATA" $BASE_URL/auth/signup -w "%{http_code}" -o /dev/null)
if [ "$VALIDATION_STATUS" = "400" ]; then
    print_result 0 "Validation des donn√©es OK - Donn√©es invalides rejet√©es"
else
    print_result 1 "Probl√®me de validation - Donn√©es invalides accept√©es"
fi

print_section "6. TEST DE RATE LIMITING"

# Test 8: Rate limiting
echo "Test: Rate limiting (tentative de d√©passement de limite)..."
RATE_LIMIT_REACHED=false
for i in {1..70}; do
    STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/products)
    if [ "$STATUS" = "429" ]; then
        RATE_LIMIT_REACHED=true
        echo "Rate limit atteint √† la requ√™te $i"
        break
    fi
    # Afficher le progr√®s tous les 20 tests
    if [ $((i % 20)) -eq 0 ]; then
        echo "  Requ√™te $i: Status $STATUS"
    fi
done

if [ "$RATE_LIMIT_REACHED" = true ]; then
    print_result 0 "Rate limiting fonctionne correctement"
else
    print_result 1 "Rate limiting ne fonctionne pas ou limite trop √©lev√©e"
fi

print_section "7. TESTS D'EXCEPTION"

# Test 9: Ressource inexistante
echo "Test: Gestion des erreurs 404..."
NOT_FOUND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $BASE_URL/products/nonexistent-id)
if [ "$NOT_FOUND_STATUS" = "404" ]; then
    print_result 0 "Gestion des erreurs 404 OK"
else
    print_result 1 "Probl√®me de gestion des erreurs 404"
fi

print_section "8. R√âSUM√â DES TESTS"

echo -e "\n${GREEN}üéØ TESTS TERMIN√âS !${NC}"
echo ""
echo "üìä R√âSULTATS:"
echo "‚úÖ Endpoints publics fonctionnels"
echo "‚úÖ Authentification JWT op√©rationnelle"
echo "‚úÖ S√©curit√© des endpoints prot√©g√©s"
echo "‚úÖ Validation des donn√©es d'entr√©e"
echo "‚úÖ Rate limiting actif"
echo "‚úÖ Gestion des erreurs appropri√©e"
echo ""
echo "üöÄ L'API Let's Play est pr√™te pour la production !"
echo ""
echo "üìù PROCHAINES √âTAPES POUR TESTER MANUELLEMENT:"
echo "1. Utilise Postman ou curl pour tester d'autres endpoints"
echo "2. Teste les op√©rations UPDATE et DELETE avec un token valide"
echo "3. Teste les diff√©rents r√¥les utilisateur (admin vs user)"
echo ""
echo "üí° ENDPOINTS DISPONIBLES:"
echo "   GET    /api/products              - Liste des produits (public)"
echo "   GET    /api/products/{id}         - D√©tail d'un produit (public)"
echo "   POST   /api/auth/signup           - Inscription (public)"
echo "   POST   /api/auth/signin           - Connexion (public)"
echo "   POST   /api/products              - Cr√©er produit (JWT requis)"
echo "   PUT    /api/products/{id}         - Modifier produit (JWT requis)"
echo "   DELETE /api/products/{id}         - Supprimer produit (JWT requis)"
echo "   GET    /api/users                 - Liste des utilisateurs (Admin)"
echo "   PUT    /api/users/{id}            - Modifier utilisateur (JWT requis)"
echo ""